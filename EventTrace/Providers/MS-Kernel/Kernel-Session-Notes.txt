ETW Kernel Session Event messages are not properly parsed by Get-WinEvent becuase the cmdlet does not have the correct xml format file

Therefore we have to parse relevant event properties using PowerShell structure parsing.

The first task is taking Get-WinEvent output and filtering it down to only return events with properties that contain the process command line

Here is an example event xml

<Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
        <Provider Name="" Guid="{3d6fa8d0-fe05-11d0-9dda-00c04fd7ba7c}" />
        <EventID>0</EventID>
        <Version>4</Version>
        <Level>0</Level>
        <Task>0</Task>
        <Opcode>2</Opcode>
        <Keywords>0x0</Keywords>
        <TimeCreated SystemTime="2017-08-11T19:58:42.695093000Z" />
        <EventRecordID>2505</EventRecordID>
        <Correlation />
        <Execution ProcessID="11068" ThreadID="4056" ProcessorID="6" KernelTime="0" UserTime="0" />
        <Channel></Channel>
        <Computer>office-pc</Computer>
        <Security />
    </System>
    <ProcessingErrorData>
        <ErrorCode>15003</ErrorCode>
        <DataItemName></DataItemName>
        <EventPayloadventPayload>
    </ProcessingErrorData>
</Event>


We are interested in the event payload. I've found the relevent messages always begin with "80". This filter seems to work:  Get-WinEvent -Path <path to file> -Oldest | ? { ([xml]$_.toxml()).Event.ChildNodes.EventPayload -match "^80" }

Next we need to grab only the EventPayload xml node:  $a | % { (([xml]$_.toxml()).Event.ChildNodes.EventPayload)[1]  }

Convert string to hex string: -split '(..)' | ? {$_} | % {[char][convert]::ToUInt32($_,16)}

Once we have the relevant events we need to parse out two properties: Process ID and Process Command Line 

Process ID is stored as a UInt32 at offset 0x08

[bitconverter]::toint16($u[8..12], 0)

ProcessCommandLine is a bit trickier. The ImageName is the first variable string the moves immediately to the commandline in the message and always starts at offset 0x40 and should be read until a double null byte (0x00 0x00) terminates the string

Start = 64
#end = $array.length
Length = 0
$NullByte = $false

For Each

$u[$start..$u.length] |
    ForEach-Object {
        If ($NullByte -and ([uint16]$_ -eq 0)) {
            break
        }
        Elseif
    }